doctype html
html
  head
    title Floats and clears - CSS - Tutorials - KVD
    include /header.pug
  body.tutorial-content
    include /nav.pug
    include /tweets.pug
    include _side.pug
    
    .top
      .container
        h1 
          span CSS: FLOATS & CLEARS #2
          | Is it a plane? Is it a bird? Something's a float!
          
    .container.divider
      p.breadcrumb
        a(href="../") tutorials
        | &nbsp;&nbsp;&gt;&nbsp; 
        span css
        | &nbsp;&nbsp;&gt;&nbsp; 
        span floats and clears #2
        
      p After explaining #[mark floats] in the previous tutorial you might have noticed that #[mark floats] are trouble. In the sense that they give you the option to position elements next to each other yes, but by doing so, they completely mess up the “flow” off your document. The normal flow simply dictates that every elements is positioned underneath the previous element. That way, you get a stack of #[mark HTML] elements.
      
      p But because we wanted them next to each other, instead of underneath each other (that’s just boring), we activated the #[mark float] property and every other element below the #[mark floating] one(s), suddenly moves up. Then even disappear behind the #[mark floating] elements if they are smaller. This is a problem and needs to be fixed. But allow me to demonstrate via an example.
      
      h2 Boxes, boxes everywhere
      
      p So, in the previous tutorial we used two blocks and placed them next to each other. Let’s do the same thing now, but with a bit more boxes. This will make our example a bit more realistic. So imagine, we have 4 elements. A header (for the logo and menu), the submenu on the left, the content on the right and the footer at the bottom. #[strong We’ll define colors for each of them].
      
      ul.conlist
        li Header: #[span(style="color: green") green]
        li Submenu: #[span(style="color: yellow") yellow]
        li Content: #[span(style="color: red") red]
        li Footer: #[span(style="color: blue") blue]
        
      p The idea is that the #[strong header] and #[strong footer] are as wide as the full website and that the content and submenu will be placed next to each other, much like our two boxes from the first tutorial.
      
      h2 Let's make 'em
      
      p So first things first; let’s make our elements in #[mark HTML]. I will give each of them an ID, as they will only appear once.
      
      pre
        code(class="language-html")
          | &lt;div id="header"&gt;&lt;/div&gt;
          | &lt;div id="submenu"&gt;&lt;/div&gt;
          | &lt;div id="content"&gt;&lt;/div&gt;
          | &lt;div id="footer"&gt;&lt;/div&gt;
      
      p After making all of these, we’ll have to style them too. Here’s the #[mark CSS] code for the colors and dimensions.
      
      pre
        code(class="language-css")
          | #header{
          |   height: 100px;
          |   background-color: green;
          | }
          | &nbsp;
          | #submenu{
          |   height: 200px;
          |   background-color: yellow;
          | }
          | &nbsp;
          | #content{
          |   height: 200px;
          |   background-color: red;
          | }
          | &nbsp;
          | #footer{
          |   height: 100px;
          |   background-color: blue;
          | }
        
      p Result: So much pain for the eyes
      
      .code_example
        .div(style="background-color: green; height: 100px")
        .div(style="background-color: yellow; height: 200px")
        .div(style="background-color: red; height: 200px")
        .div(style="background-color: blue; height: 100px")
      
      p As off now, the header and footer are perfect. But the submenu and content #[mark divs] should be next to each other, with the content on the right and the submenu on the left. Let’s use the #[mark float] property to do this.
      
      pre
        code(class="language-css")
          | #header{
          |   height: 100px;
          |   background-color: green;
          | }
          | &nbsp;
          | #submenu{
          |   height: 200px;
          |   background-color: yellow;
          |   float: left;
          |   width: 30%;
          | }
          | &nbsp;
          | #content{
          |   height: 200px;
          |   background-color: red;
          |   float: left;
          |   width: 70%;
          | }
          | &nbsp;
          | #footer{
          |   height: 100px;
          |   background-color: blue;
          | }
  
      .code_example
        .div(style="background-color: green; height: 100px")
        .div(style="background-color: yellow; height: 200px; float: left; width: 30%")
        .div(style="background-color: red; height: 200px; float: left; width: 70%")
              
      p After adding this code we’ll have some good news and some bad news. The thing we wanted; both #[mark divs] next to each other, worked and we’re very happy about that (the kind of happy you get when receiving a new toy as a kid). #[strong But the bad news is, something has disappeared]. Or that’s what it looks like. But the footer (now invisible) has actually moved up, behind the submenu and content #[mark div]. Because these two are #[mark floating] and are no longer part of the normal flow, they get ignored by all the other elements. So the footer notices free space above itself, and moves up.
      
      p We can force it to show itself by making the content div a bit smaller (width wise).
      
      pre
        code(class="language-css")
          | #content{
          |   height: 200px;
          |   background-color: red;
          |   float: left;
          |   width: 50%;
          | }
          
      .code_example
        .div(style="background-color: green; height: 100px")
        .div(style="background-color: yellow; height: 200px; float: left; width: 25%")
        .div(style="background-color: red; height: 200px; float: left; width: 60%")
        .div(style="background-color: blue; height: 100px; float: left; width: 15%")
        
      p Because of the ugly.. I mean #[strong practical] colors we’ve given to all our elements, it’s easy to spot the blue footer. It’s just below the header. It actually doesn’t belong there and has to position itself below the content and submenu #[mark divs]. But because these are #[mark floating], the positioning will be off.
      
      h2 How to fix it?
      
      p Simple. We use the #[mark clear] property. Try to remember those two as one (#[mark float] and #[mark clear]), as they will always be used at the same time (or almost always). The #[mark clear] property is an easy way to force elements to be positioned below #[mark floating] elements. General rule: you use the #[mark float] property on an element. The element underneath you do not want to #[mark float] (the footer), you #[mark clear]. And as with #[mark floating], you can give a left and right value to your #[mark clear] property. It all depends on what you’ve chosen as the #[mark float] value. Because our submenu and content #[mark div] both use the #[mark float] value: left, we also have to use that value for our #[mark clear] property. If we would have made an element #[mark float] left and another element right, we would have to use the both value for our #[mark clear] property.
      
      pre
        code(class="language-css")
          | #footer{
          |   height: 100px;
          |   background-color: blue;
          |   clear: left;
          | }
      
      .code_example
        .div(style="background-color: green; height: 100px")
        .div(style="background-color: yellow; height: 200px; float: left; width: 25%")
        .div(style="background-color: red; height: 200px; float: left; width: 60%")
        .div(style="background-color: blue; height: 100px; clear: both; width: 100%")
        
      p #[strong Proverbial tadaah!]. There we go, we placed the footer at the bottom and the submenu & content are next to each other. As a final touch, you can now change the width of the content #[mark div] back to 70%.
      
    include /footer.pug
    
    script.
      $(".mainMenu .menuTutorials").addClass("selected");
      $(".sideMenu .css2").addClass("active");
